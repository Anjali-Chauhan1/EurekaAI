import React from 'react';
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

export default function ExportButtons({ data, topic, geminiPoints, webResults }) {
  const handleExportPDF = async () => {
    try {
      const pdf = new jsPDF();
      const pageWidth = pdf.internal.pageSize.getWidth();
      const pageHeight = pdf.internal.pageSize.getHeight();
      const margin = 20;
      let yPosition = margin;

      // Add header background
      pdf.setFillColor(59, 130, 246); // Blue background
      pdf.rect(0, 0, pageWidth, 35, 'F');

      // Main title with emoji
      pdf.setFontSize(24);
      pdf.setFont(undefined, 'bold');
      pdf.setTextColor(255, 255, 255); // White text
      pdf.text(`üî¨ Research Report: ${topic}`, margin, 25);
      
      // Reset text color and position
      pdf.setTextColor(0, 0, 0);
      yPosition = 50;

      // Add date and generated by info
      pdf.setFontSize(10);
      pdf.setFont(undefined, 'normal');
      pdf.setTextColor(100, 100, 100);
      const currentDate = new Date().toLocaleDateString();
      pdf.text(`üìÖ Generated on: ${currentDate} | ‚ö° Powered by EurekaAI`, margin, yPosition);
      yPosition += 15;

      // Add separator line
      pdf.setDrawColor(200, 200, 200);
      pdf.line(margin, yPosition, pageWidth - margin, yPosition);
      yPosition += 15;

      // AI Research Points section
      if (geminiPoints) {
        // Section header with background
        pdf.setFillColor(236, 254, 255); // Light cyan background
        pdf.rect(margin - 5, yPosition - 5, pageWidth - 2 * margin + 10, 20, 'F');
        
        pdf.setFontSize(18);
        pdf.setFont(undefined, 'bold');
        pdf.setTextColor(6, 95, 70); // Dark green
        pdf.text('üß† AI Research Points', margin, yPosition + 8);
        yPosition += 25;
        
        // Content
        pdf.setFontSize(11);
        pdf.setFont(undefined, 'normal');
        pdf.setTextColor(30, 30, 30);
        
        const cleanText = geminiPoints.replace(/<[^>]*>/g, '').replace(/&[^;]*;/g, '');
        const splitText = pdf.splitTextToSize(cleanText, pageWidth - 2 * margin - 10);
        
        // Add content with padding
        pdf.text(splitText, margin + 5, yPosition);
        yPosition += splitText.length * 5 + 20;
      }

      // Sources section
      if (webResults && webResults.length > 0) {
        // Check if we need a new page
        if (yPosition > pageHeight - 80) {
          pdf.addPage();
          yPosition = margin;
        }

        // Section header with background
        pdf.setFillColor(254, 243, 199); // Light yellow background
        pdf.rect(margin - 5, yPosition - 5, pageWidth - 2 * margin + 10, 20, 'F');
        
        pdf.setFontSize(18);
        pdf.setFont(undefined, 'bold');
        pdf.setTextColor(180, 83, 9); // Orange
        pdf.text('üìö Sources & References', margin, yPosition + 8);
        yPosition += 25;
        
        pdf.setFontSize(10);
        pdf.setFont(undefined, 'normal');
        pdf.setTextColor(30, 30, 30);
        
        webResults.forEach((result, index) => {
          // Check if we need a new page
          if (yPosition > pageHeight - 40) {
            pdf.addPage();
            yPosition = margin + 10;
          }
          
          // Source number with emoji
          pdf.setFont(undefined, 'bold');
          pdf.setTextColor(59, 130, 246); // Blue
          pdf.text(`üîó ${index + 1}.`, margin, yPosition);
          
          // Source title
          pdf.setFont(undefined, 'normal');
          pdf.setTextColor(30, 30, 30);
          const titleText = pdf.splitTextToSize(result.title, pageWidth - 2 * margin - 20);
          pdf.text(titleText, margin + 15, yPosition);
          yPosition += titleText.length * 4 + 2;
          
          // Source URL
          if (result.link) {
            pdf.setFontSize(9);
            pdf.setTextColor(100, 100, 100);
            const urlText = pdf.splitTextToSize(result.link, pageWidth - 2 * margin - 20);
            pdf.text(urlText, margin + 15, yPosition);
            yPosition += urlText.length * 3 + 8;
          }
          
          pdf.setFontSize(10); // Reset font size
        });
      }

      // Add footer
      const footerY = pageHeight - 15;
      pdf.setFontSize(8);
      pdf.setTextColor(100, 100, 100);
      pdf.text('Generated by EurekaAI - Your AI Research Assistant üöÄ', margin, footerY);
      pdf.text(`Page 1 of ${pdf.internal.getNumberOfPages()}`, pageWidth - margin - 30, footerY);

      pdf.save(`${topic}-research-report.pdf`);
      alert("üìÑ PDF exported successfully! üéâ");
    } catch (error) {
      console.error('Error exporting PDF:', error);
      alert("‚ùå Error exporting PDF. Please try again.");
    }
  };

  const handleExportMD = () => {
    try {
      const currentDate = new Date().toLocaleDateString();
      let markdownContent = `# üî¨ Research Report: ${topic}\n\n`;
      markdownContent += `üìÖ **Generated on:** ${currentDate} | ‚ö° **Powered by:** EurekaAI\n\n`;
      markdownContent += `---\n\n`;
      
      if (geminiPoints) {
        markdownContent += `## üß† AI Research Points\n\n`;
        const cleanText = geminiPoints.replace(/<[^>]*>/g, '').replace(/&[^;]*;/g, '');
        markdownContent += `${cleanText}\n\n`;
        markdownContent += `---\n\n`;
      }
      
      if (webResults && webResults.length > 0) {
        markdownContent += `## üìö Sources & References\n\n`;
        webResults.forEach((result, index) => {
          markdownContent += `üîó **${index + 1}.** [${result.title}](${result.link})\n\n`;
        });
        markdownContent += `---\n\n`;
      }
      
      markdownContent += `*Generated by EurekaAI - Your AI Research Assistant* üöÄ\n`;
      
      const blob = new Blob([markdownContent], { type: 'text/markdown' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `${topic}-research-report.md`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
      alert("üìù Markdown exported successfully! üéâ");
    } catch (error) {
      console.error('Error exporting Markdown:', error);
      alert("‚ùå Error exporting Markdown. Please try again.");
    }
  };
  return (
    <div className="flex gap-4 mt-6">
  <button
    onClick={handleExportPDF}
    className="px-6 py-3 rounded-full font-semibold text-white 
      bg-purple-500/80 backdrop-blur-sm 
      shadow-md shadow-purple-500/30 
      hover:bg-purple-500/90 hover:shadow-lg hover:shadow-purple-500/50 
      transition-all duration-300"
  >
    üìÑ Export PDF
  </button>

  <button
    onClick={handleExportMD}
    className="px-6 py-3 rounded-full font-semibold text-white 
      bg-green-500/80 backdrop-blur-sm 
      shadow-md shadow-green-400/30 
      hover:bg-green-500/90 hover:shadow-lg hover:shadow-green-400/50 
      transition-all duration-300"
  >
    üìù Export Markdown
  </button>
</div>
  );
}
